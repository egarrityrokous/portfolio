import unittest
import cnf
import time
from sudoku import SudokuBoard
from sudoku import at_most_clauses, at_least_clause, nonempty_clauses
from search import search_solver
from dpll import dpll, unit_resolution, unit_resolve, DpllSearchSpace



class TestClauseDisjunction(unittest.TestCase):

    def test_clause_disjunction1(self):
        result = cnf.c('!a || b') | cnf.c('c || !e')
        assert result == cnf.c('!a || b || c || !e')

    def test_clause_disjunction2(self):
        result = cnf.c('!a || b') | cnf.c('b || c || !e')
        assert result == cnf.c('!a || b || c || !e')

    def test_clause_disjunction3(self):
        result = cnf.c('FALSE') | cnf.c('!b || c || !e')
        assert result == cnf.c('!b || c || !e')

    def test_clause_disjunction4(self):
        assert cnf.c('!a || b') | cnf.c('!b || c || !e') is None

    def test_clause_disjunction5(self):
        assert cnf.c('FALSE') | cnf.c('FALSE') == cnf.c('FALSE')


class TestSudokuBoard(unittest.TestCase):

    def test_board_str(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        expected = "\n".join(["0003",
                              "0002",
                              "3000",
                              "4000"])
        assert str(board) == expected

    def test_board_str2(self):
        board = SudokuBoard([[1, 2, 3, 4, 5, 6, 7, 8, 9],
                             [2, 0, 0, 0, 0, 0, 0, 0, 0],
                             [3, 0, 0, 0, 0, 0, 0, 0, 0],
                             [4, 0, 0, 0, 0, 0, 0, 0, 0],
                             [5, 0, 0, 0, 0, 0, 0, 0, 0],
                             [6, 0, 0, 0, 0, 0, 0, 0, 0],
                             [7, 0, 0, 0, 0, 0, 0, 0, 0],
                             [8, 0, 0, 0, 0, 0, 0, 0, 0],
                             [9, 0, 0, 0, 0, 0, 0, 0, 0]])
        expected = "\n".join(["123456789",
                              "200000000",
                              "300000000",
                              "400000000",
                              "500000000",
                              "600000000",
                              "700000000",
                              "800000000",
                              "900000000"])
        assert str(board) == expected

    def test_board_rows(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        expected = [{(1, 1), (1, 2), (1, 3), (1, 4)},
                    {(2, 1), (2, 2), (2, 3), (2, 4)},
                    {(3, 1), (3, 2), (3, 3), (3, 4)},
                    {(4, 1), (4, 2), (4, 3), (4, 4)}]
        assert board.rows() == expected

    def test_board_columns(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        expected = [{(1, 1), (2, 1), (3, 1), (4, 1)},
                    {(1, 2), (2, 2), (3, 2), (4, 2)},
                    {(1, 3), (2, 3), (3, 3), (4, 3)},
                    {(1, 4), (2, 4), (3, 4), (4, 4)}]
        assert board.columns() == expected

    def test_board_boxes(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        expected = [{(1, 1), (1, 2), (2, 1), (2, 2)},
                    {(1, 3), (1, 4), (2, 3), (2, 4)},
                    {(3, 1), (3, 2), (4, 1), (4, 2)},
                    {(3, 3), (3, 4), (4, 3), (4, 4)}]
        assert board.boxes() == expected


class TestAtLeastClause(unittest.TestCase):

    def test_at_least_clause(self):
        result = at_least_clause({(1, 3), (1, 4), (2, 3), (2, 4)}, d=2)
        expected = 'd2_1_3 || d2_1_4 || d2_2_3 || d2_2_4'
        assert result == expected


class TestAtMostClauses(unittest.TestCase):

    def test_at_most_clauses(self):
        result = at_most_clauses({(1, 3), (1, 4), (2, 3), (2, 4)}, d=2)
        clauses = sorted([str(c) for c in result])
        expected = ['!d2_1_3 || !d2_1_4',
                    '!d2_1_3 || !d2_2_3',
                    '!d2_1_3 || !d2_2_4',
                    '!d2_1_4 || !d2_2_3',
                    '!d2_1_4 || !d2_2_4',
                    '!d2_2_3 || !d2_2_4']
        assert clauses == expected


class TestNonemptyClauses(unittest.TestCase):

    def test_nonempty_clauses2(self):
        result = nonempty_clauses(2)
        sent = sorted([str(c) for c in result])
        expected = ['d1_1_1 || d2_1_1 || d3_1_1 || d4_1_1',
                    'd1_1_2 || d2_1_2 || d3_1_2 || d4_1_2',
                    'd1_1_3 || d2_1_3 || d3_1_3 || d4_1_3',
                    'd1_1_4 || d2_1_4 || d3_1_4 || d4_1_4',
                    'd1_2_1 || d2_2_1 || d3_2_1 || d4_2_1',
                    'd1_2_2 || d2_2_2 || d3_2_2 || d4_2_2',
                    'd1_2_3 || d2_2_3 || d3_2_3 || d4_2_3',
                    'd1_2_4 || d2_2_4 || d3_2_4 || d4_2_4',
                    'd1_3_1 || d2_3_1 || d3_3_1 || d4_3_1',
                    'd1_3_2 || d2_3_2 || d3_3_2 || d4_3_2',
                    'd1_3_3 || d2_3_3 || d3_3_3 || d4_3_3',
                    'd1_3_4 || d2_3_4 || d3_3_4 || d4_3_4',
                    'd1_4_1 || d2_4_1 || d3_4_1 || d4_4_1',
                    'd1_4_2 || d2_4_2 || d3_4_2 || d4_4_2',
                    'd1_4_3 || d2_4_3 || d3_4_3 || d4_4_3',
                    'd1_4_4 || d2_4_4 || d3_4_4 || d4_4_4']
        assert sent == expected

    def test_nonempty_clauses3(self):
        result = nonempty_clauses(3)
        sent = sorted([str(c) for c in result])
        expected = ['d1_1_1 || d2_1_1 || d3_1_1 || d4_1_1 || d5_1_1 || d6_1_1 || d7_1_1 || d8_1_1 || d9_1_1',
                    'd1_1_2 || d2_1_2 || d3_1_2 || d4_1_2 || d5_1_2 || d6_1_2 || d7_1_2 || d8_1_2 || d9_1_2',
                    'd1_1_3 || d2_1_3 || d3_1_3 || d4_1_3 || d5_1_3 || d6_1_3 || d7_1_3 || d8_1_3 || d9_1_3',
                    'd1_1_4 || d2_1_4 || d3_1_4 || d4_1_4 || d5_1_4 || d6_1_4 || d7_1_4 || d8_1_4 || d9_1_4',
                    'd1_1_5 || d2_1_5 || d3_1_5 || d4_1_5 || d5_1_5 || d6_1_5 || d7_1_5 || d8_1_5 || d9_1_5',
                    'd1_1_6 || d2_1_6 || d3_1_6 || d4_1_6 || d5_1_6 || d6_1_6 || d7_1_6 || d8_1_6 || d9_1_6',
                    'd1_1_7 || d2_1_7 || d3_1_7 || d4_1_7 || d5_1_7 || d6_1_7 || d7_1_7 || d8_1_7 || d9_1_7',
                    'd1_1_8 || d2_1_8 || d3_1_8 || d4_1_8 || d5_1_8 || d6_1_8 || d7_1_8 || d8_1_8 || d9_1_8',
                    'd1_1_9 || d2_1_9 || d3_1_9 || d4_1_9 || d5_1_9 || d6_1_9 || d7_1_9 || d8_1_9 || d9_1_9']
        assert sent[:9] == expected


class TestContentClauses(unittest.TestCase):

    def test_contents1(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        expected = {cnf.c('d3_1_4'),
                    cnf.c('d2_2_4'),
                    cnf.c('d3_3_1'),
                    cnf.c('d4_4_1')}
        assert set(board.contents()) == expected

    def test_contents2(self):
        board = SudokuBoard([[0, 0, 0, 0],
                             [0, 0, 0, 0],
                             [0, 0, 0, 0],
                             [0, 0, 0, 0]])
        assert set(board.contents()) == set()



class TestCnfConversion(unittest.TestCase):

    def test_constraints(self):
        board0 = SudokuBoard([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
        expected = ['!d1_1_1 || !d1_1_2',
                    '!d1_1_1 || !d1_1_3',
                    '!d1_1_1 || !d1_1_4',
                    '!d1_1_1 || !d1_2_1',
                    '!d1_1_1 || !d1_2_2',
                    '!d1_1_1 || !d1_3_1',
                    '!d1_1_1 || !d1_4_1',
                    '!d1_1_2 || !d1_1_3',
                    '!d1_1_2 || !d1_1_4',
                    '!d1_1_2 || !d1_2_1',
                    '!d1_1_2 || !d1_2_2',
                    '!d1_1_2 || !d1_3_2',
                    '!d1_1_2 || !d1_4_2',
                    '!d1_1_3 || !d1_1_4',
                    '!d1_1_3 || !d1_2_3',
                    '!d1_1_3 || !d1_2_4',
                    '!d1_1_3 || !d1_3_3',
                    '!d1_1_3 || !d1_4_3',
                    '!d1_1_4 || !d1_2_3',
                    '!d1_1_4 || !d1_2_4',
                    '!d1_1_4 || !d1_3_4',
                    '!d1_1_4 || !d1_4_4',
                    '!d1_2_1 || !d1_2_2',
                    '!d1_2_1 || !d1_2_3',
                    '!d1_2_1 || !d1_2_4',
                    '!d1_2_1 || !d1_3_1',
                    '!d1_2_1 || !d1_4_1',
                    '!d1_2_2 || !d1_2_3',
                    '!d1_2_2 || !d1_2_4',
                    '!d1_2_2 || !d1_3_2',
                    '!d1_2_2 || !d1_4_2',
                    '!d1_2_3 || !d1_2_4',
                    '!d1_2_3 || !d1_3_3',
                    '!d1_2_3 || !d1_4_3',
                    '!d1_2_4 || !d1_3_4',
                    '!d1_2_4 || !d1_4_4',
                    '!d1_3_1 || !d1_3_2',
                    '!d1_3_1 || !d1_3_3',
                    '!d1_3_1 || !d1_3_4',
                    '!d1_3_1 || !d1_4_1',
                    '!d1_3_1 || !d1_4_2',
                    '!d1_3_2 || !d1_3_3',
                    '!d1_3_2 || !d1_3_4',
                    '!d1_3_2 || !d1_4_1',
                    '!d1_3_2 || !d1_4_2',
                    '!d1_3_3 || !d1_3_4',
                    '!d1_3_3 || !d1_4_3',
                    '!d1_3_3 || !d1_4_4',
                    '!d1_3_4 || !d1_4_3',
                    '!d1_3_4 || !d1_4_4',
                    '!d1_4_1 || !d1_4_2',
                    '!d1_4_1 || !d1_4_3',
                    '!d1_4_1 || !d1_4_4',
                    '!d1_4_2 || !d1_4_3',
                    '!d1_4_2 || !d1_4_4',
                    '!d1_4_3 || !d1_4_4',
                    '!d2_1_1 || !d2_1_2',
                    '!d2_1_1 || !d2_1_3',
                    '!d2_1_1 || !d2_1_4',
                    '!d2_1_1 || !d2_2_1',
                    '!d2_1_1 || !d2_2_2',
                    '!d2_1_1 || !d2_3_1',
                    '!d2_1_1 || !d2_4_1',
                    '!d2_1_2 || !d2_1_3',
                    '!d2_1_2 || !d2_1_4',
                    '!d2_1_2 || !d2_2_1',
                    '!d2_1_2 || !d2_2_2',
                    '!d2_1_2 || !d2_3_2',
                    '!d2_1_2 || !d2_4_2',
                    '!d2_1_3 || !d2_1_4',
                    '!d2_1_3 || !d2_2_3',
                    '!d2_1_3 || !d2_2_4',
                    '!d2_1_3 || !d2_3_3',
                    '!d2_1_3 || !d2_4_3',
                    '!d2_1_4 || !d2_2_3',
                    '!d2_1_4 || !d2_2_4',
                    '!d2_1_4 || !d2_3_4',
                    '!d2_1_4 || !d2_4_4',
                    '!d2_2_1 || !d2_2_2',
                    '!d2_2_1 || !d2_2_3',
                    '!d2_2_1 || !d2_2_4',
                    '!d2_2_1 || !d2_3_1',
                    '!d2_2_1 || !d2_4_1',
                    '!d2_2_2 || !d2_2_3',
                    '!d2_2_2 || !d2_2_4',
                    '!d2_2_2 || !d2_3_2',
                    '!d2_2_2 || !d2_4_2',
                    '!d2_2_3 || !d2_2_4',
                    '!d2_2_3 || !d2_3_3',
                    '!d2_2_3 || !d2_4_3',
                    '!d2_2_4 || !d2_3_4',
                    '!d2_2_4 || !d2_4_4',
                    '!d2_3_1 || !d2_3_2',
                    '!d2_3_1 || !d2_3_3',
                    '!d2_3_1 || !d2_3_4',
                    '!d2_3_1 || !d2_4_1',
                    '!d2_3_1 || !d2_4_2',
                    '!d2_3_2 || !d2_3_3',
                    '!d2_3_2 || !d2_3_4',
                    '!d2_3_2 || !d2_4_1',
                    '!d2_3_2 || !d2_4_2',
                    '!d2_3_3 || !d2_3_4',
                    '!d2_3_3 || !d2_4_3',
                    '!d2_3_3 || !d2_4_4',
                    '!d2_3_4 || !d2_4_3',
                    '!d2_3_4 || !d2_4_4',
                    '!d2_4_1 || !d2_4_2',
                    '!d2_4_1 || !d2_4_3',
                    '!d2_4_1 || !d2_4_4',
                    '!d2_4_2 || !d2_4_3',
                    '!d2_4_2 || !d2_4_4',
                    '!d2_4_3 || !d2_4_4',
                    '!d3_1_1 || !d3_1_2',
                    '!d3_1_1 || !d3_1_3',
                    '!d3_1_1 || !d3_1_4',
                    '!d3_1_1 || !d3_2_1',
                    '!d3_1_1 || !d3_2_2',
                    '!d3_1_1 || !d3_3_1',
                    '!d3_1_1 || !d3_4_1',
                    '!d3_1_2 || !d3_1_3',
                    '!d3_1_2 || !d3_1_4',
                    '!d3_1_2 || !d3_2_1',
                    '!d3_1_2 || !d3_2_2',
                    '!d3_1_2 || !d3_3_2',
                    '!d3_1_2 || !d3_4_2',
                    '!d3_1_3 || !d3_1_4',
                    '!d3_1_3 || !d3_2_3',
                    '!d3_1_3 || !d3_2_4',
                    '!d3_1_3 || !d3_3_3',
                    '!d3_1_3 || !d3_4_3',
                    '!d3_1_4 || !d3_2_3',
                    '!d3_1_4 || !d3_2_4',
                    '!d3_1_4 || !d3_3_4',
                    '!d3_1_4 || !d3_4_4',
                    '!d3_2_1 || !d3_2_2',
                    '!d3_2_1 || !d3_2_3',
                    '!d3_2_1 || !d3_2_4',
                    '!d3_2_1 || !d3_3_1',
                    '!d3_2_1 || !d3_4_1',
                    '!d3_2_2 || !d3_2_3',
                    '!d3_2_2 || !d3_2_4',
                    '!d3_2_2 || !d3_3_2',
                    '!d3_2_2 || !d3_4_2',
                    '!d3_2_3 || !d3_2_4',
                    '!d3_2_3 || !d3_3_3',
                    '!d3_2_3 || !d3_4_3',
                    '!d3_2_4 || !d3_3_4',
                    '!d3_2_4 || !d3_4_4',
                    '!d3_3_1 || !d3_3_2',
                    '!d3_3_1 || !d3_3_3',
                    '!d3_3_1 || !d3_3_4',
                    '!d3_3_1 || !d3_4_1',
                    '!d3_3_1 || !d3_4_2',
                    '!d3_3_2 || !d3_3_3',
                    '!d3_3_2 || !d3_3_4',
                    '!d3_3_2 || !d3_4_1',
                    '!d3_3_2 || !d3_4_2',
                    '!d3_3_3 || !d3_3_4',
                    '!d3_3_3 || !d3_4_3',
                    '!d3_3_3 || !d3_4_4',
                    '!d3_3_4 || !d3_4_3',
                    '!d3_3_4 || !d3_4_4',
                    '!d3_4_1 || !d3_4_2',
                    '!d3_4_1 || !d3_4_3',
                    '!d3_4_1 || !d3_4_4',
                    '!d3_4_2 || !d3_4_3',
                    '!d3_4_2 || !d3_4_4',
                    '!d3_4_3 || !d3_4_4',
                    '!d4_1_1 || !d4_1_2',
                    '!d4_1_1 || !d4_1_3',
                    '!d4_1_1 || !d4_1_4',
                    '!d4_1_1 || !d4_2_1',
                    '!d4_1_1 || !d4_2_2',
                    '!d4_1_1 || !d4_3_1',
                    '!d4_1_1 || !d4_4_1',
                    '!d4_1_2 || !d4_1_3',
                    '!d4_1_2 || !d4_1_4',
                    '!d4_1_2 || !d4_2_1',
                    '!d4_1_2 || !d4_2_2',
                    '!d4_1_2 || !d4_3_2',
                    '!d4_1_2 || !d4_4_2',
                    '!d4_1_3 || !d4_1_4',
                    '!d4_1_3 || !d4_2_3',
                    '!d4_1_3 || !d4_2_4',
                    '!d4_1_3 || !d4_3_3',
                    '!d4_1_3 || !d4_4_3',
                    '!d4_1_4 || !d4_2_3',
                    '!d4_1_4 || !d4_2_4',
                    '!d4_1_4 || !d4_3_4',
                    '!d4_1_4 || !d4_4_4',
                    '!d4_2_1 || !d4_2_2',
                    '!d4_2_1 || !d4_2_3',
                    '!d4_2_1 || !d4_2_4',
                    '!d4_2_1 || !d4_3_1',
                    '!d4_2_1 || !d4_4_1',
                    '!d4_2_2 || !d4_2_3',
                    '!d4_2_2 || !d4_2_4',
                    '!d4_2_2 || !d4_3_2',
                    '!d4_2_2 || !d4_4_2',
                    '!d4_2_3 || !d4_2_4',
                    '!d4_2_3 || !d4_3_3',
                    '!d4_2_3 || !d4_4_3',
                    '!d4_2_4 || !d4_3_4',
                    '!d4_2_4 || !d4_4_4',
                    '!d4_3_1 || !d4_3_2',
                    '!d4_3_1 || !d4_3_3',
                    '!d4_3_1 || !d4_3_4',
                    '!d4_3_1 || !d4_4_1',
                    '!d4_3_1 || !d4_4_2',
                    '!d4_3_2 || !d4_3_3',
                    '!d4_3_2 || !d4_3_4',
                    '!d4_3_2 || !d4_4_1',
                    '!d4_3_2 || !d4_4_2',
                    '!d4_3_3 || !d4_3_4',
                    '!d4_3_3 || !d4_4_3',
                    '!d4_3_3 || !d4_4_4',
                    '!d4_3_4 || !d4_4_3',
                    '!d4_3_4 || !d4_4_4',
                    '!d4_4_1 || !d4_4_2',
                    '!d4_4_1 || !d4_4_3',
                    '!d4_4_1 || !d4_4_4',
                    '!d4_4_2 || !d4_4_3',
                    '!d4_4_2 || !d4_4_4',
                    '!d4_4_3 || !d4_4_4',
                    "d1_1_1 || d1_1_2 || d1_1_3 || d1_1_4",
                    "d1_1_1 || d1_1_2 || d1_2_1 || d1_2_2",
                    "d1_1_1 || d1_2_1 || d1_3_1 || d1_4_1",
                    "d1_1_1 || d2_1_1 || d3_1_1 || d4_1_1",
                    "d1_1_2 || d1_2_2 || d1_3_2 || d1_4_2",
                    "d1_1_2 || d2_1_2 || d3_1_2 || d4_1_2",
                    "d1_1_3 || d1_1_4 || d1_2_3 || d1_2_4",
                    "d1_1_3 || d1_2_3 || d1_3_3 || d1_4_3",
                    "d1_1_3 || d2_1_3 || d3_1_3 || d4_1_3",
                    "d1_1_4 || d1_2_4 || d1_3_4 || d1_4_4",
                    "d1_1_4 || d2_1_4 || d3_1_4 || d4_1_4",
                    "d1_2_1 || d1_2_2 || d1_2_3 || d1_2_4",
                    "d1_2_1 || d2_2_1 || d3_2_1 || d4_2_1",
                    "d1_2_2 || d2_2_2 || d3_2_2 || d4_2_2",
                    "d1_2_3 || d2_2_3 || d3_2_3 || d4_2_3",
                    "d1_2_4 || d2_2_4 || d3_2_4 || d4_2_4",
                    "d1_3_1 || d1_3_2 || d1_3_3 || d1_3_4",
                    "d1_3_1 || d1_3_2 || d1_4_1 || d1_4_2",
                    "d1_3_1 || d2_3_1 || d3_3_1 || d4_3_1",
                    "d1_3_2 || d2_3_2 || d3_3_2 || d4_3_2",
                    "d1_3_3 || d1_3_4 || d1_4_3 || d1_4_4",
                    "d1_3_3 || d2_3_3 || d3_3_3 || d4_3_3",
                    "d1_3_4 || d2_3_4 || d3_3_4 || d4_3_4",
                    "d1_4_1 || d1_4_2 || d1_4_3 || d1_4_4",
                    "d1_4_1 || d2_4_1 || d3_4_1 || d4_4_1",
                    "d1_4_2 || d2_4_2 || d3_4_2 || d4_4_2",
                    "d1_4_3 || d2_4_3 || d3_4_3 || d4_4_3",
                    "d1_4_4 || d2_4_4 || d3_4_4 || d4_4_4",
                    "d2_1_1 || d2_1_2 || d2_1_3 || d2_1_4",
                    "d2_1_1 || d2_1_2 || d2_2_1 || d2_2_2",
                    "d2_1_1 || d2_2_1 || d2_3_1 || d2_4_1",
                    "d2_1_2 || d2_2_2 || d2_3_2 || d2_4_2",
                    "d2_1_3 || d2_1_4 || d2_2_3 || d2_2_4",
                    "d2_1_3 || d2_2_3 || d2_3_3 || d2_4_3",
                    "d2_1_4 || d2_2_4 || d2_3_4 || d2_4_4",
                    "d2_2_1 || d2_2_2 || d2_2_3 || d2_2_4",
                    "d2_3_1 || d2_3_2 || d2_3_3 || d2_3_4",
                    "d2_3_1 || d2_3_2 || d2_4_1 || d2_4_2",
                    "d2_3_3 || d2_3_4 || d2_4_3 || d2_4_4",
                    "d2_4_1 || d2_4_2 || d2_4_3 || d2_4_4",
                    "d3_1_1 || d3_1_2 || d3_1_3 || d3_1_4",
                    "d3_1_1 || d3_1_2 || d3_2_1 || d3_2_2",
                    "d3_1_1 || d3_2_1 || d3_3_1 || d3_4_1",
                    "d3_1_2 || d3_2_2 || d3_3_2 || d3_4_2",
                    "d3_1_3 || d3_1_4 || d3_2_3 || d3_2_4",
                    "d3_1_3 || d3_2_3 || d3_3_3 || d3_4_3",
                    "d3_1_4 || d3_2_4 || d3_3_4 || d3_4_4",
                    "d3_2_1 || d3_2_2 || d3_2_3 || d3_2_4",
                    "d3_3_1 || d3_3_2 || d3_3_3 || d3_3_4",
                    "d3_3_1 || d3_3_2 || d3_4_1 || d3_4_2",
                    "d3_3_3 || d3_3_4 || d3_4_3 || d3_4_4",
                    "d3_4_1 || d3_4_2 || d3_4_3 || d3_4_4",
                    "d4_1_1 || d4_1_2 || d4_1_3 || d4_1_4",
                    "d4_1_1 || d4_1_2 || d4_2_1 || d4_2_2",
                    "d4_1_1 || d4_2_1 || d4_3_1 || d4_4_1",
                    "d4_1_2 || d4_2_2 || d4_3_2 || d4_4_2",
                    "d4_1_3 || d4_1_4 || d4_2_3 || d4_2_4",
                    "d4_1_3 || d4_2_3 || d4_3_3 || d4_4_3",
                    "d4_1_4 || d4_2_4 || d4_3_4 || d4_4_4",
                    "d4_2_1 || d4_2_2 || d4_2_3 || d4_2_4",
                    "d4_3_1 || d4_3_2 || d4_3_3 || d4_3_4",
                    "d4_3_1 || d4_3_2 || d4_4_1 || d4_4_2",
                    "d4_3_3 || d4_3_4 || d4_4_3 || d4_4_4",
                    "d4_4_1 || d4_4_2 || d4_4_3 || d4_4_4"]
        assert '\n'.join(expected) == str(board0.cnf())

    def test_cnf_with_contents(self):
        board0 = SudokuBoard([[0, 0, 0, 3], [0, 0, 0, 2], [3, 0, 0, 0], [4, 0, 0, 0]])
        expected = ['!d1_1_1 || !d1_1_2',
                    '!d1_1_1 || !d1_1_3',
                    '!d1_1_1 || !d1_1_4',
                    '!d1_1_1 || !d1_2_1',
                    '!d1_1_1 || !d1_2_2',
                    '!d1_1_1 || !d1_3_1',
                    '!d1_1_1 || !d1_4_1',
                    '!d1_1_2 || !d1_1_3',
                    '!d1_1_2 || !d1_1_4',
                    '!d1_1_2 || !d1_2_1',
                    '!d1_1_2 || !d1_2_2',
                    '!d1_1_2 || !d1_3_2',
                    '!d1_1_2 || !d1_4_2',
                    '!d1_1_3 || !d1_1_4',
                    '!d1_1_3 || !d1_2_3',
                    '!d1_1_3 || !d1_2_4',
                    '!d1_1_3 || !d1_3_3',
                    '!d1_1_3 || !d1_4_3',
                    '!d1_1_4 || !d1_2_3',
                    '!d1_1_4 || !d1_2_4',
                    '!d1_1_4 || !d1_3_4',
                    '!d1_1_4 || !d1_4_4',
                    '!d1_2_1 || !d1_2_2',
                    '!d1_2_1 || !d1_2_3',
                    '!d1_2_1 || !d1_2_4',
                    '!d1_2_1 || !d1_3_1',
                    '!d1_2_1 || !d1_4_1',
                    '!d1_2_2 || !d1_2_3',
                    '!d1_2_2 || !d1_2_4',
                    '!d1_2_2 || !d1_3_2',
                    '!d1_2_2 || !d1_4_2',
                    '!d1_2_3 || !d1_2_4',
                    '!d1_2_3 || !d1_3_3',
                    '!d1_2_3 || !d1_4_3',
                    '!d1_2_4 || !d1_3_4',
                    '!d1_2_4 || !d1_4_4',
                    '!d1_3_1 || !d1_3_2',
                    '!d1_3_1 || !d1_3_3',
                    '!d1_3_1 || !d1_3_4',
                    '!d1_3_1 || !d1_4_1',
                    '!d1_3_1 || !d1_4_2',
                    '!d1_3_2 || !d1_3_3',
                    '!d1_3_2 || !d1_3_4',
                    '!d1_3_2 || !d1_4_1',
                    '!d1_3_2 || !d1_4_2',
                    '!d1_3_3 || !d1_3_4',
                    '!d1_3_3 || !d1_4_3',
                    '!d1_3_3 || !d1_4_4',
                    '!d1_3_4 || !d1_4_3',
                    '!d1_3_4 || !d1_4_4',
                    '!d1_4_1 || !d1_4_2',
                    '!d1_4_1 || !d1_4_3',
                    '!d1_4_1 || !d1_4_4',
                    '!d1_4_2 || !d1_4_3',
                    '!d1_4_2 || !d1_4_4',
                    '!d1_4_3 || !d1_4_4',
                    '!d2_1_1 || !d2_1_2',
                    '!d2_1_1 || !d2_1_3',
                    '!d2_1_1 || !d2_1_4',
                    '!d2_1_1 || !d2_2_1',
                    '!d2_1_1 || !d2_2_2',
                    '!d2_1_1 || !d2_3_1',
                    '!d2_1_1 || !d2_4_1',
                    '!d2_1_2 || !d2_1_3',
                    '!d2_1_2 || !d2_1_4',
                    '!d2_1_2 || !d2_2_1',
                    '!d2_1_2 || !d2_2_2',
                    '!d2_1_2 || !d2_3_2',
                    '!d2_1_2 || !d2_4_2',
                    '!d2_1_3 || !d2_1_4',
                    '!d2_1_3 || !d2_2_3',
                    '!d2_1_3 || !d2_2_4',
                    '!d2_1_3 || !d2_3_3',
                    '!d2_1_3 || !d2_4_3',
                    '!d2_1_4 || !d2_2_3',
                    '!d2_1_4 || !d2_2_4',
                    '!d2_1_4 || !d2_3_4',
                    '!d2_1_4 || !d2_4_4',
                    '!d2_2_1 || !d2_2_2',
                    '!d2_2_1 || !d2_2_3',
                    '!d2_2_1 || !d2_2_4',
                    '!d2_2_1 || !d2_3_1',
                    '!d2_2_1 || !d2_4_1',
                    '!d2_2_2 || !d2_2_3',
                    '!d2_2_2 || !d2_2_4',
                    '!d2_2_2 || !d2_3_2',
                    '!d2_2_2 || !d2_4_2',
                    '!d2_2_3 || !d2_2_4',
                    '!d2_2_3 || !d2_3_3',
                    '!d2_2_3 || !d2_4_3',
                    '!d2_2_4 || !d2_3_4',
                    '!d2_2_4 || !d2_4_4',
                    '!d2_3_1 || !d2_3_2',
                    '!d2_3_1 || !d2_3_3',
                    '!d2_3_1 || !d2_3_4',
                    '!d2_3_1 || !d2_4_1',
                    '!d2_3_1 || !d2_4_2',
                    '!d2_3_2 || !d2_3_3',
                    '!d2_3_2 || !d2_3_4',
                    '!d2_3_2 || !d2_4_1',
                    '!d2_3_2 || !d2_4_2',
                    '!d2_3_3 || !d2_3_4',
                    '!d2_3_3 || !d2_4_3',
                    '!d2_3_3 || !d2_4_4',
                    '!d2_3_4 || !d2_4_3',
                    '!d2_3_4 || !d2_4_4',
                    '!d2_4_1 || !d2_4_2',
                    '!d2_4_1 || !d2_4_3',
                    '!d2_4_1 || !d2_4_4',
                    '!d2_4_2 || !d2_4_3',
                    '!d2_4_2 || !d2_4_4',
                    '!d2_4_3 || !d2_4_4',
                    '!d3_1_1 || !d3_1_2',
                    '!d3_1_1 || !d3_1_3',
                    '!d3_1_1 || !d3_1_4',
                    '!d3_1_1 || !d3_2_1',
                    '!d3_1_1 || !d3_2_2',
                    '!d3_1_1 || !d3_3_1',
                    '!d3_1_1 || !d3_4_1',
                    '!d3_1_2 || !d3_1_3',
                    '!d3_1_2 || !d3_1_4',
                    '!d3_1_2 || !d3_2_1',
                    '!d3_1_2 || !d3_2_2',
                    '!d3_1_2 || !d3_3_2',
                    '!d3_1_2 || !d3_4_2',
                    '!d3_1_3 || !d3_1_4',
                    '!d3_1_3 || !d3_2_3',
                    '!d3_1_3 || !d3_2_4',
                    '!d3_1_3 || !d3_3_3',
                    '!d3_1_3 || !d3_4_3',
                    '!d3_1_4 || !d3_2_3',
                    '!d3_1_4 || !d3_2_4',
                    '!d3_1_4 || !d3_3_4',
                    '!d3_1_4 || !d3_4_4',
                    '!d3_2_1 || !d3_2_2',
                    '!d3_2_1 || !d3_2_3',
                    '!d3_2_1 || !d3_2_4',
                    '!d3_2_1 || !d3_3_1',
                    '!d3_2_1 || !d3_4_1',
                    '!d3_2_2 || !d3_2_3',
                    '!d3_2_2 || !d3_2_4',
                    '!d3_2_2 || !d3_3_2',
                    '!d3_2_2 || !d3_4_2',
                    '!d3_2_3 || !d3_2_4',
                    '!d3_2_3 || !d3_3_3',
                    '!d3_2_3 || !d3_4_3',
                    '!d3_2_4 || !d3_3_4',
                    '!d3_2_4 || !d3_4_4',
                    '!d3_3_1 || !d3_3_2',
                    '!d3_3_1 || !d3_3_3',
                    '!d3_3_1 || !d3_3_4',
                    '!d3_3_1 || !d3_4_1',
                    '!d3_3_1 || !d3_4_2',
                    '!d3_3_2 || !d3_3_3',
                    '!d3_3_2 || !d3_3_4',
                    '!d3_3_2 || !d3_4_1',
                    '!d3_3_2 || !d3_4_2',
                    '!d3_3_3 || !d3_3_4',
                    '!d3_3_3 || !d3_4_3',
                    '!d3_3_3 || !d3_4_4',
                    '!d3_3_4 || !d3_4_3',
                    '!d3_3_4 || !d3_4_4',
                    '!d3_4_1 || !d3_4_2',
                    '!d3_4_1 || !d3_4_3',
                    '!d3_4_1 || !d3_4_4',
                    '!d3_4_2 || !d3_4_3',
                    '!d3_4_2 || !d3_4_4',
                    '!d3_4_3 || !d3_4_4',
                    '!d4_1_1 || !d4_1_2',
                    '!d4_1_1 || !d4_1_3',
                    '!d4_1_1 || !d4_1_4',
                    '!d4_1_1 || !d4_2_1',
                    '!d4_1_1 || !d4_2_2',
                    '!d4_1_1 || !d4_3_1',
                    '!d4_1_1 || !d4_4_1',
                    '!d4_1_2 || !d4_1_3',
                    '!d4_1_2 || !d4_1_4',
                    '!d4_1_2 || !d4_2_1',
                    '!d4_1_2 || !d4_2_2',
                    '!d4_1_2 || !d4_3_2',
                    '!d4_1_2 || !d4_4_2',
                    '!d4_1_3 || !d4_1_4',
                    '!d4_1_3 || !d4_2_3',
                    '!d4_1_3 || !d4_2_4',
                    '!d4_1_3 || !d4_3_3',
                    '!d4_1_3 || !d4_4_3',
                    '!d4_1_4 || !d4_2_3',
                    '!d4_1_4 || !d4_2_4',
                    '!d4_1_4 || !d4_3_4',
                    '!d4_1_4 || !d4_4_4',
                    '!d4_2_1 || !d4_2_2',
                    '!d4_2_1 || !d4_2_3',
                    '!d4_2_1 || !d4_2_4',
                    '!d4_2_1 || !d4_3_1',
                    '!d4_2_1 || !d4_4_1',
                    '!d4_2_2 || !d4_2_3',
                    '!d4_2_2 || !d4_2_4',
                    '!d4_2_2 || !d4_3_2',
                    '!d4_2_2 || !d4_4_2',
                    '!d4_2_3 || !d4_2_4',
                    '!d4_2_3 || !d4_3_3',
                    '!d4_2_3 || !d4_4_3',
                    '!d4_2_4 || !d4_3_4',
                    '!d4_2_4 || !d4_4_4',
                    '!d4_3_1 || !d4_3_2',
                    '!d4_3_1 || !d4_3_3',
                    '!d4_3_1 || !d4_3_4',
                    '!d4_3_1 || !d4_4_1',
                    '!d4_3_1 || !d4_4_2',
                    '!d4_3_2 || !d4_3_3',
                    '!d4_3_2 || !d4_3_4',
                    '!d4_3_2 || !d4_4_1',
                    '!d4_3_2 || !d4_4_2',
                    '!d4_3_3 || !d4_3_4',
                    '!d4_3_3 || !d4_4_3',
                    '!d4_3_3 || !d4_4_4',
                    '!d4_3_4 || !d4_4_3',
                    '!d4_3_4 || !d4_4_4',
                    '!d4_4_1 || !d4_4_2',
                    '!d4_4_1 || !d4_4_3',
                    '!d4_4_1 || !d4_4_4',
                    '!d4_4_2 || !d4_4_3',
                    '!d4_4_2 || !d4_4_4',
                    '!d4_4_3 || !d4_4_4',
                    "d1_1_1 || d1_1_2 || d1_1_3 || d1_1_4",
                    "d1_1_1 || d1_1_2 || d1_2_1 || d1_2_2",
                    "d1_1_1 || d1_2_1 || d1_3_1 || d1_4_1",
                    "d1_1_1 || d2_1_1 || d3_1_1 || d4_1_1",
                    "d1_1_2 || d1_2_2 || d1_3_2 || d1_4_2",
                    "d1_1_2 || d2_1_2 || d3_1_2 || d4_1_2",
                    "d1_1_3 || d1_1_4 || d1_2_3 || d1_2_4",
                    "d1_1_3 || d1_2_3 || d1_3_3 || d1_4_3",
                    "d1_1_3 || d2_1_3 || d3_1_3 || d4_1_3",
                    "d1_1_4 || d1_2_4 || d1_3_4 || d1_4_4",
                    "d1_1_4 || d2_1_4 || d3_1_4 || d4_1_4",
                    "d1_2_1 || d1_2_2 || d1_2_3 || d1_2_4",
                    "d1_2_1 || d2_2_1 || d3_2_1 || d4_2_1",
                    "d1_2_2 || d2_2_2 || d3_2_2 || d4_2_2",
                    "d1_2_3 || d2_2_3 || d3_2_3 || d4_2_3",
                    "d1_2_4 || d2_2_4 || d3_2_4 || d4_2_4",
                    "d1_3_1 || d1_3_2 || d1_3_3 || d1_3_4",
                    "d1_3_1 || d1_3_2 || d1_4_1 || d1_4_2",
                    "d1_3_1 || d2_3_1 || d3_3_1 || d4_3_1",
                    "d1_3_2 || d2_3_2 || d3_3_2 || d4_3_2",
                    "d1_3_3 || d1_3_4 || d1_4_3 || d1_4_4",
                    "d1_3_3 || d2_3_3 || d3_3_3 || d4_3_3",
                    "d1_3_4 || d2_3_4 || d3_3_4 || d4_3_4",
                    "d1_4_1 || d1_4_2 || d1_4_3 || d1_4_4",
                    "d1_4_1 || d2_4_1 || d3_4_1 || d4_4_1",
                    "d1_4_2 || d2_4_2 || d3_4_2 || d4_4_2",
                    "d1_4_3 || d2_4_3 || d3_4_3 || d4_4_3",
                    "d1_4_4 || d2_4_4 || d3_4_4 || d4_4_4",
                    "d2_1_1 || d2_1_2 || d2_1_3 || d2_1_4",
                    "d2_1_1 || d2_1_2 || d2_2_1 || d2_2_2",
                    "d2_1_1 || d2_2_1 || d2_3_1 || d2_4_1",
                    "d2_1_2 || d2_2_2 || d2_3_2 || d2_4_2",
                    "d2_1_3 || d2_1_4 || d2_2_3 || d2_2_4",
                    "d2_1_3 || d2_2_3 || d2_3_3 || d2_4_3",
                    "d2_1_4 || d2_2_4 || d2_3_4 || d2_4_4",
                    "d2_2_1 || d2_2_2 || d2_2_3 || d2_2_4",
                    "d2_2_4",
                    "d2_3_1 || d2_3_2 || d2_3_3 || d2_3_4",
                    "d2_3_1 || d2_3_2 || d2_4_1 || d2_4_2",
                    "d2_3_3 || d2_3_4 || d2_4_3 || d2_4_4",
                    "d2_4_1 || d2_4_2 || d2_4_3 || d2_4_4",
                    "d3_1_1 || d3_1_2 || d3_1_3 || d3_1_4",
                    "d3_1_1 || d3_1_2 || d3_2_1 || d3_2_2",
                    "d3_1_1 || d3_2_1 || d3_3_1 || d3_4_1",
                    "d3_1_2 || d3_2_2 || d3_3_2 || d3_4_2",
                    "d3_1_3 || d3_1_4 || d3_2_3 || d3_2_4",
                    "d3_1_3 || d3_2_3 || d3_3_3 || d3_4_3",
                    "d3_1_4",
                    "d3_1_4 || d3_2_4 || d3_3_4 || d3_4_4",
                    "d3_2_1 || d3_2_2 || d3_2_3 || d3_2_4",
                    "d3_3_1",
                    "d3_3_1 || d3_3_2 || d3_3_3 || d3_3_4",
                    "d3_3_1 || d3_3_2 || d3_4_1 || d3_4_2",
                    "d3_3_3 || d3_3_4 || d3_4_3 || d3_4_4",
                    "d3_4_1 || d3_4_2 || d3_4_3 || d3_4_4",
                    "d4_1_1 || d4_1_2 || d4_1_3 || d4_1_4",
                    "d4_1_1 || d4_1_2 || d4_2_1 || d4_2_2",
                    "d4_1_1 || d4_2_1 || d4_3_1 || d4_4_1",
                    "d4_1_2 || d4_2_2 || d4_3_2 || d4_4_2",
                    "d4_1_3 || d4_1_4 || d4_2_3 || d4_2_4",
                    "d4_1_3 || d4_2_3 || d4_3_3 || d4_4_3",
                    "d4_1_4 || d4_2_4 || d4_3_4 || d4_4_4",
                    "d4_2_1 || d4_2_2 || d4_2_3 || d4_2_4",
                    "d4_3_1 || d4_3_2 || d4_3_3 || d4_3_4",
                    "d4_3_1 || d4_3_2 || d4_4_1 || d4_4_2",
                    "d4_3_3 || d4_3_4 || d4_4_3 || d4_4_4",
                    "d4_4_1",
                    "d4_4_1 || d4_4_2 || d4_4_3 || d4_4_4"]
        assert '\n'.join(expected) == str(board0.cnf())




class TestCheckModel(unittest.TestCase):

    def test_check_model1(self):
        clauses = ['a || b',
                   '!a || !b']
        sent = cnf.sentence(*clauses)
        assert not sent.check_model({'a': False, 'b': False})
        assert not sent.check_model({'a': True, 'b': True})
        assert sent.check_model({'a': False, 'b': True})
        assert sent.check_model({'a': True, 'b': False})

    def test_check_model2(self):
        clauses = ['!a || b || e',
                   'a || !b',
                   'b || !e',
                   'd || !e',
                   '!b || !c || !f',
                   'a || !e',
                   '!b || f',
                   '!b || c']
        sent = cnf.sentence(*clauses)
        model = {'a': False, 'b': False, 'c': True, 'd': True, 'e': False, 'f': True}
        assert sent.check_model(model)
        model = {'a': False, 'b': True, 'c': False, 'd': False, 'e': False, 'f': False}
        assert not sent.check_model(model)


class TestSearchSolver(unittest.TestCase):

    def test_search_solver1(self):
        clauses = ['a || b',
                   '!a || b',
                   '!a || !b']
        result, models = search_solver(cnf.sentence(*clauses))
        assert result == {'a': False, 'b': True}

    def test_search_solver2(self):
        clauses = ['a || b', 
                    '!a || !b']
        result, models = search_solver(cnf.sentence(*clauses))
        assert result == {'a': True, 'b': False}

    def test_search_solver3(self):
        clauses = ['a || b',
                   '!a || b',
                   'a || !b',
                   '!a || !b']
        result, models = search_solver(cnf.sentence(*clauses))
        assert result is None

    def test_search_solver4(self):
        clauses = ['a || b',
                    '!a || b || e',
                    'a || !b',
                    'b || !e',
                    'd || !e',
                    '!b || !c || !f',
                    'a || !e',
                    '!b || f',
                    '!b || c']
        result, models = search_solver(cnf.sentence(*clauses))
        assert result is None
        result, models = search_solver(cnf.sentence(*clauses[1:]))
        assert result == {'a': False, 'b': False, 'c': True, 'd': True, 'e': False, 'f': True}
        result, models = search_solver(cnf.sentence(*clauses[:-1]))
        assert result == {'a': True, 'b': True, 'c': False, 'd': True, 'e': True, 'f': True}





class TestUnitResolve(unittest.TestCase):

    def test_unit_resolve1(self):
        unit_clauses = [cnf.c('b'), cnf.c('d')]
        result = unit_resolve(unit_clauses, cnf.c('!b || d'))
        assert result is None

    def test_unit_resolve2(self):
        unit_clauses = [cnf.c('b'), cnf.c('e')]
        result = unit_resolve(unit_clauses, cnf.c('!b || d'))
        assert result == cnf.c('d')

    def test_unit_resolve3(self):
        unit_clauses = [cnf.c('b'), cnf.c('e')]
        result = unit_resolve(unit_clauses, cnf.c('!b || c || d || !e '))
        assert result == cnf.c('c || d')

    def test_unit_resolve4(self):
        unit_clauses = [cnf.c('b'), cnf.c('e')]
        result = unit_resolve(unit_clauses, cnf.c('!b || c || d || e '))
        assert result is None



class TestUnitResolution(unittest.TestCase):

    def test_unit_resolution1(self):
        clauses = [cnf.c('!b || d')]
        unit_clauses = [cnf.c('b'), cnf.c('!d')]
        new_unit, new_reg = unit_resolution(unit_clauses, clauses)       
        self.assertEqual(set(new_unit), set(unit_clauses))
        self.assertEqual(set(new_reg), {cnf.c('FALSE')})

    def test_unit_resolution2(self):
        clauses = [cnf.c('!b || d'),
                   cnf.c('!b || e'),
                   cnf.c('!c || !e || !f'),
                   cnf.c('!e || f'),
                   cnf.c('a || !b'),
                   cnf.c('b || !d || e'),
                   cnf.c('c || !e'),
                   cnf.c('d || !e'),
                   cnf.c('d || e')]
        unit_clauses = [cnf.c('!a')]
        new_unit, new_reg = unit_resolution(unit_clauses, clauses)
        self.assertEqual(set(new_unit), {cnf.c("!b"), cnf.c("!a")})
        self.assertEqual(set(new_reg), {cnf.c('!c || !e || !f'),
                                        cnf.c('!e || f'),
                                        cnf.c('!d || e'),
                                        cnf.c('c || !e'),
                                        cnf.c('d || !e'),
                                        cnf.c('d || e')})

    def test_unit_resolution3(self):
        clauses = [cnf.c('!b || d'),
                   cnf.c('b || e')]
        units, regs = unit_resolution([], clauses)
        assert set(units) == set([])
        assert set(regs) == set(clauses)

    def test_unit_resolution4(self):
        clauses = [cnf.c('a || b'),
                   cnf.c('!b || c'),
                   cnf.c('!c || !d'),
                   cnf.c('d || e'),
                   cnf.c('f || g')]
        unit_clauses = [cnf.c('!a')]
        new_unit, new_reg = unit_resolution(unit_clauses, clauses)
        self.assertEqual(set(new_unit), {cnf.c("!a"),
                                         cnf.c("b"),
                                         cnf.c("c"),
                                         cnf.c("!d"),
                                         cnf.c("e")})
        self.assertEqual(set(new_reg), {cnf.c('f || g')})

    def test_unit_resolution5(self):
        clauses = [cnf.c('a || !c'), cnf.c('!b || c')]
        unit_clauses = [cnf.c('!a'), cnf.c('b')]
        units, regs = unit_resolution(unit_clauses, clauses)
        assert cnf.c('FALSE') in set(regs)



class TestDpllSearchSpace(unittest.TestCase):

    def test_dpll_search_space1(self):
        space = DpllSearchSpace(cnf.sentence('a || b || c', '!b || !c', '!a || !b'))
        state1 = space.get_start_state()
        self.assertEqual(state1, tuple())

    def test_dpll_search_space2(self):
        space = DpllSearchSpace(cnf.sentence('a || b || c', '!a || !b'))
        successors = space.get_successors(space.get_start_state())
        self.assertEqual(len(successors), 2)
        self.assertEqual(successors[0], (cnf.l('!a'),))
        self.assertEqual(successors[1], (cnf.l('a'),))
        state = (cnf.l('!a'),)
        successors = space.get_successors(state)
        self.assertEqual(len(successors), 2)
        self.assertEqual(successors[0], (cnf.l('!a'), cnf.l('!b')))
        self.assertEqual(successors[1], (cnf.l('!a'), cnf.l('b')))
        state = (cnf.l('!a'), cnf.l('b'))
        successors = space.get_successors(state)
        self.assertEqual(len(successors), 2)
        self.assertEqual(successors[0], (cnf.l('!a'), cnf.l('b'), cnf.l('!c')))
        self.assertEqual(successors[1], (cnf.l('!a'), cnf.l('b'), cnf.l('c')))

    def test_dpll_search_space3(self):
        space = DpllSearchSpace(cnf.sentence('a || b || c', '!b || !c', '!a || !b'))
        state = (cnf.l('!a'), cnf.l('b'))
        successors = space.get_successors(state)
        self.assertEqual(len(successors), 1)
        self.assertEqual(successors[0], (cnf.l('!a'), cnf.l('b'), cnf.l('!c')))

    def test_dpll_search_space4(self):
        space = DpllSearchSpace(cnf.sentence('!b', 'a || b || c', '!c'))
        successors = space.get_successors(space.get_start_state())
        self.assertEqual(len(successors), 1)
        self.assertEqual(successors[0], (cnf.l('a'),))

    def test_dpll_search_space5(self):
        space = DpllSearchSpace(cnf.sentence('a || !c', '!b || c'))
        state = (cnf.l('!a'), cnf.l('b'))
        successors = space.get_successors(state)
        self.assertEqual(len(successors), 0)




class TestDpll(unittest.TestCase):

    def test_dpll1(self):
        clauses = ['a || b',
                   '!a || b',
                   '!a || !b']
        result = dpll(cnf.sentence(*clauses))
        self.assertEqual(result, {'a': False, 'b': True})

    def test_dpll2(self):
        clauses = ['a || b',
                   '!a || !b']
        result = dpll(cnf.sentence(*clauses))
        self.assertEqual(result, {'a': True, 'b': False})

    def test_dpll3(self):
        clauses = ['a || b',
                   '!a || b',
                   'a || !b',
                   '!a || !b']
        result = dpll(cnf.sentence(*clauses))
        assert result is None

    def test_dpll4(self):
        clauses = ['a || b',
                   '!a || b || e',
                   'a || !b',
                   'b || !e',
                   'd || !e',
                   '!b || !c || !f',
                   'a || !e',
                   '!b || f',
                   '!b || c']
        result = dpll(cnf.sentence(*clauses))
        assert result is None
        result = dpll(cnf.sentence(*clauses[1:]))
        self.assertEqual(result, {'a': False, 'b': False, 'c': True, 'd': True, 'e': False, 'f': True})
        result = dpll(cnf.sentence(*clauses[:-1]))
        self.assertEqual(result, {'a': True, 'b': True, 'c': False, 'd': True, 'e': True, 'f': True})


class TestDpllSpeed(unittest.TestCase):

    def test_dpll_contrastive(self):
        clauses = ['a || b',
                   '!a || b || e',
                   'a || !b',
                   'b || !e',
                   'd || !e',
                   '!b || !c || !f',
                   'a || !e',
                   '!b || f',
                   '!b || c',
                   'g1 || !a || b',
                   'g2 || !a || b',
                   'g3 || !a || b',
                   'g4 || !a || b',
                   'g5 || !a || b',
                   'g6 || !a || b',
                   'g7 || !a || b',
                   'g8 || !a || b',
                   'g9 || !a || b',
                   'g10 || !a || b',
                   'g11 || !a || b']
        result = dpll(cnf.sentence(*clauses))
        assert result is None


class TestDpllSpeed2(unittest.TestCase):

    def test_dpll_possible(self):
        clauses = []
        with open('solvable1.txt') as reader:
            for line in reader:
                clauses.append(line.strip())
        result = dpll(cnf.sentence(*clauses))
        assert result is not None


class TestSearchSolverSpeed(unittest.TestCase):

    def test_search_solver(self):
        clauses = ['a || b',
                   '!a || b || e',
                   'a || !b',
                   'b || !e',
                   'd || !e',
                   '!b || !c || !f',
                   'a || !e',
                   '!b || f',
                   '!b || c',
                   'g1 || !a || b',
                   'g2 || !a || b',
                   'g3 || !a || b',
                   'g4 || !a || b',
                   'g5 || !a || b',
                   'g6 || !a || b',
                   'g7 || !a || b',
                   'g8 || !a || b',
                   'g9 || !a || b',
                   'g10 || !a || b',
                   'g11 || !a || b']
        result, models = search_solver(cnf.sentence(*clauses))
        assert result is None


class TestSudokuBoardSolve(unittest.TestCase):

    def test_solve1(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 0, 0, 0],
                             [4, 0, 0, 0]])
        solved = board.solve()
        expected = '\n'.join(['2413',
                              '1342',
                              '3124',
                              '4231'])
        assert str(solved) == expected

    def test_solve2(self):
        board = SudokuBoard([[4, 1, 2, 3],
                             [2, 3, 4, 1],
                             [3, 4, 1, 2],
                             [0, 0, 0, 0]])
        solved = board.solve()
        expected = '\n'.join(['4123',
                              '2341',
                              '3412',
                              '1234'])
        assert str(solved) == expected

    def test_solve3(self):
        board = SudokuBoard([[0, 0, 0, 3],
                             [0, 0, 0, 2],
                             [3, 3, 0, 0],
                             [4, 0, 0, 0]])
        assert board.solve() is None

    def test_solve4(self):
        board = SudokuBoard([[2, 0, 0, 3],
                             [0, 0, 0, 2],
                             [0, 3, 1, 0],
                             [4, 0, 0, 0]])
        assert board.solve() is None

    def test_solve5(self):
        board = SudokuBoard([[1, 0, 0, 0],
                             [0, 2, 0, 0],
                             [0, 0, 3, 0],
                             [0, 0, 0, 4]])
        solved = board.solve()
        assert solved is not None

    def test_solve6(self):
        board = SudokuBoard([[0, 0, 0, 0],
                             [0, 0, 0, 0],
                             [0, 0, 0, 0],
                             [0, 0, 0, 0]])
        solved = board.solve()
        assert solved is not None

"""
class TestLargeSudokuBoardSolve(unittest.TestCase):

    def test_solve1(self):
        board = SudokuBoard([[5, 3, 0, 0, 7, 0, 0, 0, 0],
                             [6, 0, 0, 1, 9, 5, 0, 0, 0],
                             [0, 9, 8, 0, 0, 0, 0, 6, 0],
                             [8, 0, 0, 0, 6, 0, 0, 0, 3],
                             [4, 0, 0, 8, 0, 3, 0, 0, 1],
                             [7, 0, 0, 0, 2, 0, 0, 0, 6],
                             [0, 6, 0, 0, 0, 0, 2, 8, 0],
                             [0, 0, 0, 4, 1, 9, 0, 0, 5],
                             [0, 0, 0, 0, 8, 0, 0, 7, 9]])
        solved = board.solve()
        print(solved)


    def test_solve2(self):
        board = SudokuBoard([[1, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 2, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 3, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 4, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 5, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 6, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 7, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 8, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 9]])
        solved = board.solve()
        print(solved)

    def test_solve3(self):
        board = SudokuBoard([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0]])
        solved = board.solve()
        print(solved)
"""





